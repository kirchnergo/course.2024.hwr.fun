#+TITLE: Funktionale Programmierung in F# (5)
#+BEAMER_HEADER: \subtitle{Parser Combinators}

#+AUTHOR: Göran Kirchner
#+EMAIL: e_kirchnerg@doz.hwr-berlin.de
#+DATE: 2023-05-03

# #+BEAMER_HEADER: \institute[INST]{\href{http://www.rki.de/EN}{Robert Koch Institute}}
# #+BEAMER_HEADER: \logo{\pgfputat{\pgfxy(-0.8,7.5)}{\pgfbox[center,base]{\includegraphics[width=1.6cm]{rki-logo}}}}

#+OPTIONS: H:2 toc:nil ltoc:t \n:nil @:t ::t |:t ^:t *:t TeX:t LaTeX:t email:t pri:nil todo:nil stat:nil

#+LATEX_CLASS: beamer
#+LATEX_CLASS_OPTIONS: [presentation]
#+LaTeX_CLASS_OPTIONS: [t]
#+latex_header: \mode<beamer>{\usetheme{Amsterdam}}
#+latex_header: \mode<beamer>{\usecolortheme{rose}}
# #+BEAMER_THEME: Amsterdam

# #+COLUMNS: %45ITEM %10BEAMER_ENV(Env) %10BEAMER_ACT(Act) %4BEAMER_COL(Col) %8BEAMER_OPT(Opt)

#+Include: "../inc/preamble-talk.org"

#+LATEX_HEADER: \RequirePackage{fancyvrb}
#+LATEX_HEADER: \DefineVerbatimEnvironment{verbatim}{Verbatim}{fontsize=\scriptsize}

#+PROPERTY: header-args:fsharp :tangle ../src/5/00_slides.fsx
#+PROPERTY: header-args:fsharp :cashe yes

* Ziel [1/1]
** DONE Programm
CLOSED: [2024-05-03 Fri 07:17]

- Programmieraufgabe
- Test
- Parser (Kombinatoren)

* Programmieraufgabe [2/2]
** DONE Poker
CLOSED: [2024-05-03 Fri 07:17]

#+begin_src fsharp :results value :exports code
  type Rank =
       | Two | Three | Four | Five | Six | Seven | Eight | Nine | Ten 
       | Jack | Queen | King | Ace
  type HandCategory =
       | HighCard of Rank * Rank * Rank * Rank * Rank
       | OnePair of Rank * Rank * Rank * Rank
       | TwoPair of Rank * Rank * Rank
       | ThreeKind of Rank * Rank
       | Straight of Rank
       | Flush of Rank
       | FullHouse of Rank * Rank
       | FourKind of Rank * Rank
       | StraightFlush of Rank
       | RoyalFlush
#+end_src

#+RESULTS:
#+begin_example
type Rank =
  | Two
  | Three
  | Four
  | Five
  | Six
  | Seven
  | Eight
  | Nine
  | Ten
  | Jack
  | Queen
  | King
  | Ace
type HandCategory =
  | HighCard of Rank * Rank * Rank * Rank * Rank
  | OnePair of Rank * Rank * Rank * Rank
  | TwoPair of Rank * Rank * Rank
  | ThreeKind of Rank * Rank
  | Straight of Rank
  | Flush of Rank
  | FullHouse of Rank * Rank
  | FourKind of Rank * Rank
  | StraightFlush of Rank
  | RoyalFlush
#+end_example

** DONE Zusammenfassung
CLOSED: [2024-05-03 Fri 07:17]

- nutze [[https://exercism.io][exercism.io]]!
- Vermeide =mutable=!!
- nur wichtiges verdient einen Namen
- Vertraue der *Pipe* (=>>=, =|>=, ...)!!
- If-Then-Else mit Boolean ist unnötig
- Parametrisiere!
- If-Then-Else vermeiden ... besser =match=!
- Be lazy! (vermeide =for=-loops)
- [[https://fsharpforfunandprofit.com/troubleshooting-fsharp/][Troubleshooting F#]]
- [[https://docs.microsoft.com/de-de/dotnet/fsharp/style-guide/][F#-Styleguide]]

* Test [1/1]
** DONE Test
CLOSED: [2024-05-03 Fri 07:18]

- 60 Minuten

$\leadsto$ [[../src/test/test.md][Test]]

* Parser [10/10]
** DONE Parser 1 (hard-coded character)                                                
CLOSED: [2024-05-03 Fri 07:18]

#+Name:parser-01
#+begin_src fsharp :results value :exports both :eval yes
  open System
  let A_Parser str =
      if String.IsNullOrEmpty(str) then
          (false,"")
      else if str.[0] = 'A' then
          let remaining = str.[1..]
          (true,remaining)
      else
          (false,str)
  let inputABC = "ABCD"
  let inputZBC = "ZBCD"
  let test11 = A_Parser inputABC
  let test12 = A_Parser inputZBC
#+end_src

#+RESULTS: parser-01
: val A_Parser: str: string -> bool * string
: val inputABC: string = "ABCD"
: val inputZBC: string = "ZBCD"
: val test11: bool * string = (true, "BCD")
: val test12: bool * string = (false, "ZBCD")

** DONE Parser 2 (match a specified character)                                                
CLOSED: [2024-05-03 Fri 07:18]

#+Name:parser-02
#+begin_src fsharp :results value :exports both :eval yes
  let pchar (charToMatch,str) =
      if String.IsNullOrEmpty(str) then
          let msg = "No more input"
          (msg,"")
      else 
          let first = str.[0] 
          if first = charToMatch then
              let remaining = str.[1..]
              let msg = sprintf "Found %c" charToMatch
              (msg,remaining)
          else
              let msg = sprintf "Expecting '%c'. Got '%c'" charToMatch first
              (msg,str)
#+end_src

#+RESULTS: parser-02
: val pchar: charToMatch: char * str: string -> string * string

** DONE Parser 2 (2)
CLOSED: [2024-05-03 Fri 07:18]

#+Name:parser-02b
#+begin_src fsharp :results value :exports both :eval yes
let inputABC = "ABCD"
let inputZBC = "ZBCD"
let test21 = pchar('A',inputABC) 
let test22 = pchar('A',inputZBC)
#+end_src

#+RESULTS: parser-02b
: val inputABC: string = "ABCD"
: val inputZBC: string = "ZBCD"
: val test21: string * string = ("Found A", "BCD")
: val test22: string * string = ("Expecting 'A'. Got 'Z'", "ZBCD")

** DONE Parser 3 (return a Result)                                                 
CLOSED: [2024-05-03 Fri 07:18]

#+Name:parser-03
#+begin_src fsharp :results value :exports both :eval no
  let pchar (charToMatch, s) =
      if String.IsNullOrEmpty(s) then
          Error "No more input"
      else
          let first = s.[0]
          if first = charToMatch then
              let remaining = s.[1..]
              Ok (charToMatch, remaining)
          else
              let msg = sprintf "Expecting '%c'. Got '%c'" charToMatch first
              Error msg
#+end_src

#+RESULTS: parser-03
: val pchar: charToMatch: char * s: string -> Result<(char * string),string>

** DONE Parser 3 (2)                                                 
CLOSED: [2024-05-03 Fri 07:18]

#+Name:parser-03b
#+begin_src fsharp :results value :exports both :eval no
let test31 = pchar('A',inputABC) 
let test32 = pchar('A',inputZBC) 
let test33 = pchar('Z',inputZBC)
#+end_src

#+RESULTS: parser-03b
: val test31: Result<(char * string),string> = Ok ('A', "BCD")
: val test32: Result<(char * string),string> = Error "Expecting 'A'. Got 'Z'"
: val test33: Result<(char * string),string> = Ok ('Z', "BCD")

** DONE Parser 4 (use currying)                                                
CLOSED: [2024-05-03 Fri 07:18]

#+Name:parser-04
#+begin_src fsharp :results value :exports both :eval no
let pchar charToMatch str = 
    if String.IsNullOrEmpty(str) then
        Error "No more input"
    else
        let first = str.[0] 
        if first = charToMatch then
            let remaining = str.[1..]
            Ok (charToMatch,remaining)
        else
            let msg = sprintf "Expecting '%c'. Got '%c'" charToMatch first
            Error msg
#+end_src

#+RESULTS: parser-04
: val pchar: charToMatch: char -> str: string -> Result<(char * string),string>

** DONE Parser 4 (2)                                             
CLOSED: [2024-05-03 Fri 07:18]

#+Name:parser-04b
#+begin_src fsharp :results value :exports both :eval no
let parseA = pchar 'A'
let inputABC = "ABC"
let inputZBC = "ZBC"
let test41 = parseA inputABC
let test42 = parseA inputZBC
let parseZ = pchar 'Z' 
let test43 = parseZ inputZBC
#+end_src

#+RESULTS: parser-04b
: val parseA: (string -> Result<(char * string),string>)
: val inputABC: string = "ABC"
: val inputZBC: string = "ZBC"
: val test41: Result<(char * string),string> = Ok ('A', "BC")
: val test42: Result<(char * string),string> = Error "Expecting 'A'. Got 'Z'"
: val parseZ: (string -> Result<(char * string),string>)
: val test43: Result<(char * string),string> = Ok ('Z', "BC")

** DONE Parser 5 (type to wrap the parser function)                                          
CLOSED: [2024-05-03 Fri 07:18]

#+Name:parser-05
#+begin_src fsharp :results value :exports both :eval no
  type Parser<'T> =
      | Parser of (string -> Result<'T , string>)
  let pchar charToMatch = 
      let innerFn str =
          if String.IsNullOrEmpty(str) then
              Error "No more input"
          else
              let first = str.[0] 
              if first = charToMatch then
                  let remaining = str.[1..]
                  Ok (charToMatch, remaining)
              else
                  let msg = sprintf "Expecting '%c'. Got '%c'" charToMatch first
                  Error msg
      Parser innerFn
#+end_src

#+RESULTS: parser-05
: type Parser<'T> = | Parser of (string -> Result<'T,string>)
: val pchar: charToMatch: char -> Parser<char * string>

** DONE Parser 5 (2)                                             
CLOSED: [2024-05-03 Fri 07:18]

#+Name:parser-05b
#+begin_src fsharp :results value :exports both :eval no
  let parseA = pchar 'A'
  let inputABC = "ABC"
  parseA inputABC
#+end_src

#+RESULTS: parser-05b
: 
:   parseA inputABC;;
:   ^^^^^^
: 
: error FS0003: This value is not a function and cannot be applied.

** DONE Parser 5 (3)
CLOSED: [2024-05-03 Fri 07:18]

#+Name:parser-05c
#+begin_src fsharp :results value :exports both :eval no
let run parser input = 
    let (Parser innerFn) = parser 
    innerFn input
let parseA = pchar 'A' 
let inputABC = "ABC"
let test1 = run parseA inputABC
let inputZBC = "ZBC"
let test2 = run parseA inputZBC
#+end_src

#+RESULTS: parser-05c
: val run: parser: Parser<'a> -> input: string -> Result<'a,string>
: val parseA: Parser<char * string> = Parser <fun:pchar@238-14>
: val inputABC: string = "ABC"
: val test1: Result<(char * string),string> = Ok ('A', "BC")
: val inputZBC: string = "ZBC"
: val test2: Result<(char * string),string> = Error "Expecting 'A'. Got 'Z'"

* Parser Kombinatoren [5/5]
** DONE Understanding Parser Combinators
CLOSED: [2024-05-03 Fri 07:18]

$\leadsto$ [[./5 Understanding parser combinators.pdf][Understanding parser combinators]] (Scott Wlashin)

\null\hfill--Scott Wlashin: [[https://fsharpforfunandprofit.com/parser][F# for Fun and Profit]]

** DONE FParsec Tutorial
CLOSED: [2024-05-03 Fri 07:18]

- [[http://www.quanttec.com/fparsec/tutorial.html#][FParsec Tutorial]]
- [[http://www.quanttec.com/fparsec/users-guide/][User’s Guide]]
- [[http://www.quanttec.com/fparsec/about/fparsec-vs-alternatives.html][FParsec vs alternatives]]

** DONE Using FParsec (1)
CLOSED: [2024-05-03 Fri 07:18]

#+Name:fsparsec-01
#+begin_src fsharp :results value :exports both
#r "../src/5/02-fparsec/lib/FParsecCS.dll";; 
#r "../src/5/02-fparsec/lib/FParsec.dll";;
open FParsec
let test p str =
    match run p str with
    | Success(result, _, _)   -> printfn "Success: %A" result
    | Failure(errorMsg, _, _) -> printfn "Failure: %s" errorMsg;;
test pfloat "1.25"
test pfloat "1.25E 2"
#+end_src

#+RESULTS: fsparsec-01
#+begin_example
test pfloat "1.25"
test pfloat "1.25E 2";;
Binding session to '/Users/kirchnerg/Desktop/courses/course.2023.hwr.fun/slides/../src/5/02-fparsec/lib/FParsec.dll'...
Binding session to '/Users/kirchnerg/Desktop/courses/course.2023.hwr.fun/slides/../src/5/02-fparsec/lib/FParsecCS.dll'...
Success: 1.25
Failure: Error in Ln: 1 Col: 6
1.25E 2
     ^
Expecting: decimal digit

val it: unit = ()
#+end_example

** DONE Using FParsec (2)
CLOSED: [2024-05-03 Fri 07:18]

#+Name:fsparsec-02
#+begin_src fsharp :results value :exports both
let str s = pstring s
let floatBetweenBrackets:Parser<float, unit>  = str "[" >>. pfloat .>> str "]";;

test floatBetweenBrackets "[1.0]"
test floatBetweenBrackets "[]"
test floatBetweenBrackets "[1.0]"
#+end_src

#+RESULTS: fsparsec-02
#+begin_example
test floatBetweenBrackets "[1.0]"
test floatBetweenBrackets "[]"
test floatBetweenBrackets "[1.0]";;
Success: 1.0
Failure: Error in Ln: 1 Col: 2
[]
 ^
Expecting: floating-point number

Success: 1.0
val it: unit = ()
#+end_example

** DONE Using FParsec (3)
CLOSED: [2024-05-03 Fri 07:19]

#+Name:fsparsec-03
#+begin_src fsharp :results value :exports both :eval no
let betweenStrings s1 s2 p = str s1 >>. p .>> str s2;;
let floatBetweenBrackets_:Parser<float, unit> = pfloat |> betweenStrings "[" "]";;
let floatBetweenDoubleBrackets_:Parser<float, unit> = pfloat |> betweenStrings "[[" "]]";;
test floatBetweenBrackets_ "[1.0]"
test floatBetweenDoubleBrackets_ "[[1.0]]"
let between_ pBegin pEnd p  = pBegin >>. p .>> pEnd;;
let betweenStrings_ s1 s2 p = p |> between_ (str s1) (str s2);;
test (many floatBetweenBrackets) ""
test (many floatBetweenBrackets) "[1.0]"
test (many floatBetweenBrackets) "[2][3][4]"
test (many floatBetweenBrackets) "[1][2.0E]"
#+end_src

#+RESULTS: fsparsec-03
#+begin_example
Success: []
Success: [1.0]
Success: [2.0; 3.0; 4.0]
Failure: Error in Ln: 1 Col: 9
[1][2.0E]
        ^
Expecting: decimal digit

val it: unit = ()
#+end_example

* Ende [3/3]
** DONE Zusammenfassung (Kurs)
CLOSED: [2024-05-03 Fri 07:19]

- Wichtige Werkzeuge (git, dotnet, code)
- Elementare Syntax
- Funktionen, Pattern Matching, Discriminated Unions (DU)
- Tuple, Record, List, Array, Seq
- funktionale Operationen auf Listen (Tail-Rekursion)
- funktionaler Umgang mit fehlenden Daten (Option)
- funktionaler Umgang mit Fehlern (Result)
- funktionales Design (statt Patterns: Funktionen & Verkettung)
- funktionales Refactoring
- funktionales Domain Modeling (DDD)
- eigenschaftsbasiertes Testen (Property Based Testing) (cool!!)
- funktionale Parser (Kombinatoren) (noch cooler!!)
$\leadsto$ **Was ist Funktionale Programmierung?**

** DONE Links
CLOSED: [2024-05-03 Fri 07:19]

- [[https://fsharp.org/][fsharp.org]]
- [[https://docs.microsoft.com/de-de/dotnet/fsharp/][docs.microsoft.com/../dotnet/fsharp]]
- [[https://sergeytihon.com/][F# weekly]]
- [[https://fsharpforfunandprofit.com/][fsharpforfunandprofit.com]]
- [[https://github.com/fsprojects/awesome-fsharp][github.com/../awesome-fsharp]]

** DONE Ende
CLOSED: [2024-05-03 Fri 07:19]

- Wie geht es weiter?
- [[https://exercism.io][Exercism!]]
- Buchtipps
  - [[https://pragprog.com/book/swdddf/domain-modeling-made-functional][Domain Modeling Made Functional]] (F#)
  - [[https://www.apress.com/gp/book/9781484239995][Stylish F#]] (F#)
  - [[https://www.cambridge.org/core/books/pearls-of-functional-algorithm-design/B0CF0AC5A205AF9491298684113B088F#][Perls of Functional Algorithm Design]] (Haskell)
  - [[https://www.cs.ox.ac.uk/publications/books/functional/][Thinking Functional with Haskell]] (Haskell)
  - [[http://www.paulgraham.com/onlisp.html][On Lisp]] (LISP)
  - [[http://www.iqool.de/FPMP.html][Funktionale Programmierung und Metaprogrammierung]] (LISP)
  - [[https://github.com/norvig/paip-lisp][Paradigms of Artificial Intelligence Programming]] (LISP)
  - [[https://adv-r.hadley.nz/][Advanced R]] (R)
- Sprachen: [[https://www.r-project.org/][R]], [[https://www.haskell.org/][Haskell]], [[https://clojure.org/][Clojure]], [[https://lisp-lang.org/][Common Lisp]], [[https://elixir-lang.org/][Elixir]], [[https://code.kx.com/q/][q]]

- **Have FUN!**

* Sample                                                           :noexport:
 
** Frame 1

*** Thanks to Eric Fraga :B_block:BMCOL:
:PROPERTIES:
:BEAMER_COL: 0.48
:BEAMER_ENV: block
:END:

for the first viable Beamer setup in Org

*** Thanks to everyone else :B_block:BMCOL:
:PROPERTIES:
:BEAMER_COL: 0.48
:BEAMER_ACT: <2->
:BEAMER_ENV: block
:END:

for contributing to the discussion

