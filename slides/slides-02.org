#+TITLE: Funktionale Programmierung in F# (2)
#+BEAMER_HEADER: \subtitle{Grundlagen \& Railway Oriented Programming}

#+AUTHOR: Göran Kirchner
#+EMAIL: e_kirchnerg@doz.hwr-berlin.de
#+DATE: 2024-03-15

# #+BEAMER_HEADER: \institute[INST]{\href{http://www.rki.de/EN}{Robert Koch Institute}}
# #+BEAMER_HEADER: \logo{\pgfputat{\pgfxy(-0.8,7.5)}{\pgfbox[center,base]{\includegraphics[width=1.6cm]{rki-logo}}}}

#+OPTIONS: H:2 toc:nil ltoc:t \n:nil @:t ::t |:t ^:t *:t TeX:t LaTeX:t email:t pri:nil todo:nil stat:nil

#+LATEX_CLASS: beamer
#+LATEX_CLASS_OPTIONS: [presentation]
#+LaTeX_CLASS_OPTIONS: [t]
#+latex_header: \mode<beamer>{\usetheme{Amsterdam}}
#+latex_header: \mode<beamer>{\usecolortheme{rose}}
# #+BEAMER_THEME: Amsterdam

# #+COLUMNS: %45ITEM %10BEAMER_ENV(Env) %10BEAMER_ACT(Act) %4BEAMER_COL(Col) %8BEAMER_OPT(Opt)

#+Include: "../inc/preamble-talk.org"

#+LATEX_HEADER: \RequirePackage{fancyvrb}
#+LATEX_HEADER: \DefineVerbatimEnvironment{verbatim}{Verbatim}{fontsize=\scriptsize}

#+PROPERTY: header-args:fsharp :tangle ../src/2/00_slides.fsx

* Ziel [1/1]

** DONE Programm
CLOSED: [2024-03-15 Fri 00:35]

- Hausaufgaben
- Algorithmen
  - Operationen auf einer Liste
  - Wiederholung (Pattern Matching, Rekursion)
- ROP (Railway Oriented Programming)
  - Umgang mit fehlende Daten (Option)
  - Umgang mit Fehlern (Result)

* Hausaufgaben [4/4]

** DONE Two-Fer
CLOSED: [2024-03-15 Fri 00:36]

#+begin_src fsharp :results value :exports both
let twoFer (input: string option): string = 
    input 
    |> Option.defaultValue "you"
    |> sprintf "One for %s, one for me."

let test1 = [twoFer None; twoFer (Some "Alice"); twoFer (Some "Bob")]
#+end_src

#+RESULTS:
: val twoFer: input: string option -> string
: val test1: string list =
:   ["One for you, one for me."; "One for Alice, one for me.";
:    "One for Bob, one for me."]

** DONE Leap
CLOSED: [2024-03-15 Fri 00:36]

#+begin_src fsharp :results value :exports both
  let divisible_by n d = n % d = 0
  let leapYear year =
      let year_divisible_by = divisible_by year
      year_divisible_by 4
      && not(year_divisible_by 100) 
      || year_divisible_by 400

  let test1 = [leapYear 1900; leapYear 1996]
  let test2 = [leapYear 2000; leapYear 2019; leapYear 2020]
#+end_src

#+RESULTS:
: val divisible_by: n: int -> d: int -> bool
: val leapYear: year: int -> bool
: val test1: bool list = [false; true]
: val test2: bool list = [true; false; true]

** DONE Isogram
CLOSED: [2024-03-15 Fri 00:36]

#+begin_src fsharp :results value :exports both
let isIsogram (str: string) =
    let letters =
        str.ToLowerInvariant()
        |> Seq.filter System.Char.IsLetter
        |> Seq.toList
    letters
    |> Seq.distinct
    |> Seq.length
    |> (=) letters.Length
let test1 = [isIsogram ""; isIsogram "isogram"]
let test2 = [isIsogram "eleven"; isIsogram "subdermatoglyphic"]
#+end_src

#+RESULTS:
: val isIsogram: str: string -> bool
: val test1: bool list = [true; true]
: val test2: bool list = [false; true]

** DONE Sum Of Multiples
CLOSED: [2024-03-15 Fri 00:37]

#+begin_src fsharp :results value :exports both :cache yes
let multiplesOf max n =
    if n = 0 then [0] else [n .. n .. (max - 1)]
let sum (numbers: int list) (upperBound: int): int =
    numbers
    |> List.collect (multiplesOf upperBound)
    |> List.distinct
    |> List.sum
#time "on"
let test = [sum [3; 5] 1000; sum [2; 3; 5; 7; 11] 10000]
#time "off"
#+end_src

#+RESULTS[3d875a83dcd6db9ba438f33ea530d8292897937b]:
#+begin_example
val multiplesOf: max: int -> n: int -> int list
val sum: numbers: int list -> upperBound: int -> int


--> Timing now on

Real: 00:00:00.001, CPU: 00:00:00.001, GC gen0: 0, gen1: 0, gen2: 0
val test: int list = [233168; 39614537]


--> Timing now off
#+end_example

* Algorithmen (List Ops) [14/14]

** DONE length
CLOSED: [2024-03-15 Fri 00:37]

#+begin_src fsharp :results value :exports both
let rec length' list =
    match list with
    | [] -> 0
    | _::xs -> 1 + length' xs
let length list =
    let rec _length list acc =
        match list with
        | [] -> acc
        | _::xs -> _length xs (acc + 1)
    _length list 0

let test1 = [length' []; length' [1; 2; 3; 4]]
let test2 = [length []; length [1; 2; 3; 4]]
#+end_src

#+RESULTS:
: val length': list: 'a list -> int
: val length: list: 'a list -> int
: val test1: int list = [0; 4]
: val test2: int list = [0; 4]

** DONE reverse
CLOSED: [2024-03-15 Fri 00:37]

#+begin_src fsharp :results value :exports both :cache no
let reverse list =
    let rec _reverse list acc =
        match list with
        | [] -> acc
        | x::xs -> _reverse xs (x::acc)
    _reverse list []

let test1 = reverse [1; 3; 5; 7]
let test2 = reverse [[1; 2]; [3]; []; [4..8]]
#+end_src

#+RESULTS:
: val reverse: list: 'a list -> 'a list
: val test1: int list = [7; 5; 3; 1]
: val test2: int list list = [[4; 5; 6; 7; 8]; []; [3]; [1; 2]]

** DONE map 
CLOSED: [2024-03-15 Fri 00:38]

#+begin_src fsharp :results value :exports both
let map f list = 
    let rec _map f list acc =
        match list with
        | [] -> acc |> reverse
        | x::xs -> _map f xs ((f x)::acc)
    _map f list []   

let test = map (fun x -> x + 1) [1; 3; 5; 7]
#+end_src

#+RESULTS:
: val map: f: ('a -> 'b) -> list: 'a list -> 'b list
: val test: int list = [2; 4; 6; 8]

** DONE filter (Übung)
CLOSED: [2024-03-15 Fri 00:38]

#+begin_src fsharp :results value :exports both :eval no
// filter : f:('a -> bool) -> list:'a list -> 'a list
let filter f list =
    ...
    match list with
    | [] -> ...
    | x::xs -> ...

let test = filter (fun x -> x % 2 = 1) [1..1000]
#+end_src

#+RESULTS:
#+begin_example
val filter : f:('a -> bool) -> list:'a list -> 'a list
val test : int list =
  [1; 3; 5; 7; 9; 11; 13; 15; 17; 19; 21; 23; 25; 27; 29; 31; 33; 35; 37; 39;
   41; 43; 45; 47; 49; 51; 53; 55; 57; 59; 61; 63; 65; 67; 69; 71; 73; 75; 77;
   79; 81; 83; 85; 87; 89; 91; 93; 95; 97; 99; 101; 103; 105; 107; 109; 111;
   113; 115; 117; 119; 121; 123; 125; 127; 129; 131; 133; 135; 137; 139; 141;
   143; 145; 147; 149; 151; 153; 155; 157; 159; 161; 163; 165; 167; 169; 171;
   173; 175; 177; 179; 181; 183; 185; 187; 189; 191; 193; 195; 197; 199; ...]
#+end_example

** DONE filter (Lösung 1)
CLOSED: [2024-03-15 Fri 00:38]

#+begin_src fsharp :results value :exports both :cache yes
let rec filter f list = 
    match list with
    | [] -> []
    | x::xs -> match f x with
               | true -> x :: filter f xs
               | false -> filter f xs
let test = filter (fun x -> x % 2 = 1) [1..10_000]
#+end_src

#+RESULTS[013ad09c862e19d1fc7ffa2e93e153627cabf9dd]:
: val filter: f: ('a -> bool) -> list: 'a list -> 'a list
: val test: int list =
:   [1; 3; 5; 7; 9; 11; 13; 15; 17; 19; 21; 23; 25; 27; 29; 31; 33; 35; 37; 39;
:    41; 43; 45; 47; 49; 51; 53; 55; 57; 59; 61; 63; 65; 67; 69; 71; 73; 75; 77;
:    79; 81; 83; 85; 87; 89; 91; 93; 95; 97; 99; 101; 103; 105; 107; 109; 111;
:    113; 115; 117; 119; 121; 123; 125; 127; 129; 131; 133; 135; 137; 139; 141;
:    143; 145; 147; 149; 151; 153; 155; 157; 159; 161; 163; 165; 167; 169; 171;
:    173; 175; 177; 179; 181; 183; 185; 187; 189; 191; 193; 195; 197; 199; ...]

** DONE filter (Lösung 2)
CLOSED: [2024-03-15 Fri 00:38]

#+begin_src fsharp :results output :exports both :cache nno
let filter f list = 
    let rec _filter f list acc = 
        match list with
        | [] -> acc |> reverse
        | x::xs ->  match f x with
                    | true -> _filter f xs (x::acc)
                    | false -> _filter f xs acc
    _filter f list []
let test = filter (fun x -> x % 2 = 1) [1..10_000]
test
#+end_src

#+RESULTS[271c4d8b484ad5251d34e5d9e092e3b311180b31]:

** DONE Große Zahlen (Übung)
CLOSED: [2024-03-15 Fri 00:39]

- Berechne $5^{4^{3^2}}$
- Wie lang ist die Zahl?
- Gib die ersten und letzten 20 Ziffern an!

** DONE Große Zahlen (Lösung)
CLOSED: [2024-03-15 Fri 00:40]

#+begin_src fsharp :results value :cache no :exports both
#time "on"
let answer = 5I **(int (4I ** (int (3I ** 2))));;
let sans = answer.ToString()
let l = sans.Length
let prefix = sans.Substring(0,20)
let suffix = sans.Substring(l-20)
#time "off"
printfn "Length = %d, digits %s ... %s" l prefix suffix
#+end_src

#+RESULTS[48ceffe7837985d7ca2aed6e9d3626651a7bf66e]:
#+begin_example
let sans = answer.ToString()
let l = sans.Length
let prefix = sans.Substring(0,20)
let suffix = sans.Substring(l-20)
#time "off"
printfn "Length = %d, digits %s ... %s" l prefix suffix;;
Real: 00:00:00.502, CPU: 00:00:00.505, GC gen0: 0, gen1: 0, gen2: 0
val sans: string =
  "62060698786608744707483205572846793091942O19265199117173177383"+[183170 chars]
val l: int = 183231
val prefix: string = "62060698786608744707"
val suffix: string = "92256259918212890625"


--> Timing now off

Length = 183231, digits 62060698786608744707 ... 92256259918212890625
val it: unit = ()
#+end_example

** DONE foldl
CLOSED: [2024-03-15 Fri 00:40]


#+begin_src fsharp :results value :exports both
let rec foldl folder state list = 
    match list with
    | [] -> state
    | x::xs -> foldl folder (folder state x) xs

let test1 = foldl (+) 0 [1..1_000]
let test2 = foldl (*) 1I [1I..42I]
#+end_src

#+RESULTS:
: val foldl: folder: ('a -> 'b -> 'a) -> state: 'a -> list: 'b list -> 'a
: val test1: int = 500500
: val test2: System.Numerics.BigInteger =
:   1405006117752879898543142606244511569936384000000000

** DONE foldr
CLOSED: [2024-03-15 Fri 00:40]

#+begin_src fsharp :results value :exports both
let flip f b a = f a b 
let rec foldr folder state list = 
    foldl (flip folder) state (reverse list)

let test = foldr (+) 5 [1; 2; 3; 4]
#+end_src

#+RESULTS:
: val flip: f: ('a -> 'b -> 'c) -> b: 'b -> a: 'a -> 'c
: val foldr: folder: ('a -> 'b -> 'b) -> state: 'b -> list: 'a list -> 'b
: val test: int = 15

** DONE append
CLOSED: [2024-03-15 Fri 00:40]

#+begin_src fsharp :results value :exports both
let append xs ys = foldr (fun x acc -> x :: acc) ys xs

let test = append [1..5] [6..10] 
#+end_src

#+RESULTS:
: let append xs ys = foldr (fun x acc -> x :: acc) ys xs
: 
: let test = append [1..5] [6..10];;
: val append: xs: 'a list -> ys: 'a list -> 'a list
: val test: int list = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10]

** DONE concat (1)
CLOSED: [2024-03-15 Fri 00:40]

#+begin_src fsharp :results value :exports both
let concat xs = foldr append [] xs
let rec concat' xs = 
    match xs with
    | [] -> []
    | []::ys -> concat' ys
    | (x::xs)::ys -> x:: (concat' (xs::ys))
let concat'' xs =
    let rec _concat xs acc = 
        match xs with
        | [] -> acc |> reverse
        | []::ys -> _concat ys acc
        | (x::xs)::ys -> _concat (xs::ys) (x::acc)
    _concat xs []
#+end_src

#+RESULTS:
: val concat: xs: 'a list list -> 'a list
: val concat': xs: 'a list list -> 'a list
: val concat'': xs: 'a list list -> 'a list

** DONE concat (2)
CLOSED: [2024-03-15 Fri 00:41]

#+begin_src fsharp :results value :exports both
let test1 = concat [[1; 2]; [3]; []; [4; 5; 6]]
let test2 = concat' [[1; 2]; [3]; []; [4; 5; 6]]
let test3 = concat'' [[1; 2]; [3]; []; [4; 5; 6]]

let test1b = concat [[[1]; [2]]; [[3]]; [[]]; [[4; 5; 6]]]
let test2b = concat' [[[1]; [2]]; [[3]]; [[]]; [[4; 5; 6]]] 
let test3b = concat'' [[[1]; [2]]; [[3]]; [[]]; [[4; 5; 6]]] 
#+end_src

#+RESULTS:
#+begin_example
let test1 = concat [[1; 2]; [3]; []; [4; 5; 6]]
let test2 = concat' [[1; 2]; [3]; []; [4; 5; 6]]
let test3 = concat'' [[1; 2]; [3]; []; [4; 5; 6]]

let test1b = concat [[[1]; [2]]; [[3]]; [[]]; [[4; 5; 6]]]
let test2b = concat' [[[1]; [2]]; [[3]]; [[]]; [[4; 5; 6]]] 
let test3b = concat'' [[[1]; [2]]; [[3]]; [[]]; [[4; 5; 6]]];;
val test1: int list = [1; 2; 3; 4; 5; 6]
val test2: int list = [1; 2; 3; 4; 5; 6]
val test3: int list = [1; 2; 3; 4; 5; 6]
val test1b: int list list = [[1]; [2]; [3]; []; [4; 5; 6]]
val test2b: int list list = [[1]; [2]; [3]; []; [4; 5; 6]]
val test3b: int list list = [[1]; [2]; [3]; []; [4; 5; 6]]
#+end_example

** DONE Pause
CLOSED: [2024-03-15 Fri 00:41]

*** 
    :PROPERTIES:
    :BEAMER_env: block
    :END:

There is no programming language, no matter how structured, 
that will prevent programmers from making bad programs.

\null\hfill--Larry Flon (1975)

* ROP [11/11]
** DONE ROP
CLOSED: [2024-03-15 Fri 00:41]

$\leadsto$ [[./2 Railway Oriented Programming.pdf][Railway Oriented Programming]]

\null\hfill--Scott Wlashin: [[https://fsharpforfunandprofit.com/rop/][F# for Fun and Profit]]

** DONE Option
CLOSED: [2024-03-15 Fri 00:41]

#+begin_src fsharp :results value :exports code
type BillingDetails = { 
    name : string
    billing :  string
    delivery : string option }
let order1 = {
    name = "Adam Smith"
    billing = "112 Fibonacci Street\n35813" 
    delivery = None }
let order2 = {
    name = "John Doe"
    billing = "314 Pi Avenue\n35999"
    delivery = Some "16 Planck Parkway\n62291" }
#+end_src

#+RESULTS:
#+begin_example
type BillingDetails =
  {
    name: string
    billing: string
    delivery: string option
  }
val order1: BillingDetails = { name = "Adam Smith"
                               billing = "112 Fibonacci Street
35813"
                               delivery = None }
val order2: BillingDetails = { name = "John Doe"
                               billing = "314 Pi Avenue
35999"
                               delivery = Some "16 Planck Parkway
62291" }
#+end_example

** DONE Option
CLOSED: [2024-03-15 Fri 00:41]

#+begin_src fsharp :results value :exports both
let addressForPackage (details : BillingDetails) = 
    let address =
        match details.delivery with 
        | Some s -> s
        | None -> details.billing
    sprintf "%s\n%s" details.name address
printfn "%s" (addressForPackage order1)
printfn "%s" (addressForPackage order2)
#+end_src

#+RESULTS:
: Adam Smith
: 112 Fibonacci Street
: 35813
: John Doe
: 16 Planck Parkway
: 62291
: val addressForPackage: details: BillingDetails -> string
: val it: unit = ()

** DONE Option =bind= and =map=
CLOSED: [2024-03-15 Fri 00:42]

#+begin_src fsharp :results value :exports code
open System
let tryLastLine (address : string) = 
    let parts = address.Split([|'\n'|], StringSplitOptions.RemoveEmptyEntries)
    parts |> Array.tryLast
let tryPostalCode (codeString : string) = 
    match Int32.TryParse(codeString) with 
    | true, i -> i |> Some
    | false, _ -> None
let postalCodeHub (code : int) = 
    if code = 62291 then "Hub 1" else "Hub 2"
let tryHub (details : BillingDetails) = 
    details.delivery
    |> Option.bind tryLastLine 
    |> Option.bind tryPostalCode 
    |> Option.map postalCodeHub
#+end_src

#+RESULTS:
: val tryLastLine: address: string -> string option
: val tryPostalCode: codeString: string -> int option
: val postalCodeHub: code: int -> string
: val tryHub: details: BillingDetails -> string option

** DONE Option 
CLOSED: [2024-03-15 Fri 00:42]

#+begin_src fsharp :results value :exports both
let test1 = order1 |> tryHub
let test2 = order2 |> tryHub
#+end_src

#+RESULTS:
: val test1: string option = None
: val test2: string option = Some "Hub 1"

** DONE Result (Imperativ)
CLOSED: [2024-03-15 Fri 00:42]

#+begin_src fsharp :results value :exports both
open System
let checkString (s : string) =
  if isNull(s) then
    raise <| ArgumentNullException("Must not be null")
  elif String.IsNullOrEmpty(s) then
    raise <| ArgumentException("Must not be empty")
  elif String.IsNullOrWhiteSpace(s) then
    raise <| ArgumentException("Must not be white space")
  else
    s
//checkString null
//checkString ""
checkString " "
#+end_src

#+RESULTS:
: System.ArgumentException: Must not be white space
:    at FSI_0092.checkString(String s)
:    at <StartupCode$FSI_0092>.$FSI_0092.main@()
: Stopped due to error

** DONE Result (Result<'Success,'Failure>)
CLOSED: [2024-03-15 Fri 00:42]

#+begin_src fsharp :results value :exports both
open System
let notEmpty (s : string) =
    if isNull(s) then Error "Must not be null"
    elif String.IsNullOrEmpty(s) then Error "Must not be empty"
    elif String.IsNullOrWhiteSpace(s) then Error "Must not be white space"
    else Ok s
let t1 = notEmpty null;;
let t2 = notEmpty "";;
let t3 = notEmpty " ";;
t1, t2, t3
#+end_src

#+RESULTS:
: val it: Result<string,string> * Result<string,string> * Result<string,string>
: = (Error "Must not be null", Error "Must not be empty",
:    Error "Must not be white space")

** DONE Result (Error-Types DU)
CLOSED: [2024-03-15 Fri 00:42]

#+begin_src fsharp :results value :exports both
open System
type ValidationError =
           | MustNotBeNull
           | MustNotBeEmpty
           | MustNotBeWhiteSpace
let notEmpty (s : string) =
    if isNull(s) then Error MustNotBeNull
    elif String.IsNullOrEmpty(s) then Error MustNotBeEmpty
    elif String.IsNullOrWhiteSpace(s) then Error MustNotBeWhiteSpace
    else Ok s
let t1 = notEmpty null;;
let t2 = notEmpty "";;
let t3 = notEmpty " ";;
notEmpty, t1, t2, t3
#+end_src

#+RESULTS:
: val it:
:   (string -> Result<string,ValidationError>) * Result<string,ValidationError> *
:   Result<string,ValidationError> * Result<string,ValidationError> =
:   (<fun:it@481-7>, Error MustNotBeNull, Error MustNotBeEmpty,
:    Error MustNotBeWhiteSpace)

** DONE Map
CLOSED: [2024-03-15 Fri 00:42]

- E.map (=<$>=): =(a->b) -> E<a> -> E<b>=
  [[./../img/vgfp_map.png]]
  [[./../img/vgfp_map2.png]]

** DONE Bind
CLOSED: [2024-03-15 Fri 00:42]

- E.bind (=>>==): =(a->E<b>) -> E<a> -> E<b>=
  [[./../img/vgfp_bind.png]]
  [[./../img/vgfp_bind_composition.png]]

** DONE Pause
CLOSED: [2024-03-15 Fri 00:42]

*** 
    :PROPERTIES:
    :BEAMER_env: block
    :END:

Applications programming is a race between software engineers, 
who strive to produce idiot-proof programs, 
and the universe which strives to produce bigger idiots. 
So far the Universe is winning.

\null\hfill-- Rick Cook (1989)

* Ende [3/3]
** DONE Zusammenfassung
CLOSED: [2024-03-15 Fri 00:42]

- funktionale Operationen auf Listen (Tail-Rekursion)
- funktionaler Umgang mit fehlenden Daten (Option)
- funktionaler Umgang mit Fehlern (Result)

** DONE Links
CLOSED: [2024-03-15 Fri 00:42]

- [[https://fsharp.org/][fsharp.org]]
- [[https://docs.microsoft.com/de-de/dotnet/fsharp/][docs.microsoft.com/../dotnet/fsharp]]
- [[https://sergeytihon.com/][F# weekly]]
- [[https://fsharpforfunandprofit.com/][fsharpforfunandprofit.com]]
- [[https://github.com/fsprojects/awesome-fsharp][github.com/../awesome-fsharp]]

** DONE Hausaufgabe
CLOSED: [2024-03-15 Fri 00:42]

- exercism.io (E-Mail bis 02.02)
  - [ ] Queen Attack
  - [ ] Raindrops
  - [ ] Gigasecond
- exercism.io (E-Mail bis 15.04)
  - [ ] Bank Account
  - [ ] Accumulate
  - [ ] Space Age
- exercism.io (E-Mail bis 29.04)
  - [ ] Poker (Programmieraufgabe)
  
* Sample                                                           :noexport:
 
** Frame 1

*** Thanks to Eric Fraga :B_block:BMCOL:
:PROPERTIES:
:BEAMER_COL: 0.48
:BEAMER_ENV: block
:END:

for the first viable Beamer setup in Org

*** Thanks to everyone else :B_block:BMCOL:
:PROPERTIES:
:BEAMER_COL: 0.48
:BEAMER_ACT: <2->
:BEAMER_ENV: block
:END:

for contributing to the discussion

