#+TITLE: Funktionale Programmierung in F# (1)
#+BEAMER_HEADER: \subtitle{Erste Schritte in F\#}

#+AUTHOR: Göran Kirchner
#+EMAIL: e_kirchnerg@doz.hwr-berlin.de
#+DATE: 2024-02-23

# #+BEAMER_HEADER: \institute[INST]{\href{http://www.rki.de/EN}{Robert Koch Institute}}
# #+BEAMER_HEADER: \logo{\pgfputat{\pgfxy(-0.8,7.5)}{\pgfbox[center,base]{\includegraphics[width=1.6cm]{rki-logo}}}}

#+OPTIONS: H:2 toc:nil ltoc:t \n:nil @:t ::t |:t ^:t *:t TeX:t LaTeX:t email:t pri:nil todo:nil stat:nil

#+LATEX_CLASS: beamer
#+LATEX_CLASS_OPTIONS: [presentation]
#+LaTeX_CLASS_OPTIONS: [t]
# #+latex_header: \mode<beamer>{\usetheme{Amsterdam}}
#+BEAMER_THEME: Amsterdam

#+COLUMNS: %45ITEM %10BEAMER_ENV(Env) %10BEAMER_ACT(Act) %4BEAMER_COL(Col) %8BEAMER_OPT(Opt)

#+Include: "../inc/preamble-talk.org"

#+LATEX_HEADER: \RequirePackage{fancyvrb}
#+LATEX_HEADER: \DefineVerbatimEnvironment{verbatim}{Verbatim}{fontsize=\scriptsize}

#+PROPERTY: header-args:fsharp :tangle ../src/1/00_slides.fsx

* Organisatorisches [9/9]

** DONE Organisatorisches
CLOSED: [2024-02-22 Thu 17:38]

- Termine
  - [23.02, 15.03, 05.04, 19.04, 03.05]
- Bewertung
  - .50: Hausaufgaben (10)
  - .25: Programmieraufgabe (in der vorvorletzten Einheit)
  - .25: Test (multiple choice, in der letzten Einheit)
- Folien und Code auf [[https://github.com/kirchnergo/course.2023.hwr.fun][github.com/kirchnergo/course.2024.hwr.fun]]

** DONE Was ist F#
CLOSED: [2024-02-22 Thu 17:41]

F# ist eine funktionale Programmiersprache, die das Schreiben von korrektem und verwaltbarem Code erleichtert.
In F# können Typen und Funktionen geschrieben werden, deren Typen automatisch generalisiert werden. Dies ermöglicht es, sich auf die Problemdomäne zu konzentrieren und die Daten zu bearbeiten, statt sich um die Details der Programmierung zu kümmern.

F# verfügt über zahlreiche Features, einschließlich:
- Leichtgewichtige Syntax
- Standardmäßig unveränderliche Werte
- Typrückschluss und automatische Generalisierung
- Funktionen erster Klasse
- Musterabgleich
- Asynchrone Programmierung

** DONE So sieht F# aus
CLOSED: [2024-02-22 Thu 17:41]

#+begin_src fsharp
open System // Gets access to functionality in System namespace.

// Defines a function that takes a name and produces a greeting.
let getGreeting name =
    sprintf "Hello, %s! Isn't F# great?" name

let main args =
    // Defines a list of names
    let names = [ "Don"; "Julia"; "Xi" ]
    // Prints a greeting for each name!
    names
    |> List.map getGreeting
    |> List.iter (fun greeting -> printfn "%s" greeting)
    0
#+end_src

#+RESULTS:
: val getGreeting: name: string -> string
: val main: args: 'a -> int

** DONE Programm
CLOSED: [2024-02-22 Thu 17:41]

1. Einführung & Erste Schritte
2. Grundlagen & ROP (Railway Oriented Programming)
3. Grundlagen & DDD (Domain Driven Design)
4. Property-Based Testing
5. Parser Combinators

** DONE Einführung & Erste Schritte (1)
CLOSED: [2024-02-22 Thu 17:41]

- Werkzeuge (VS Code, git, dotnet)
- Datentypen
- Collections
- Pattern Matching
- Funktionen

** DONE Grundlagen & ROP - Railway Oriented Programming (2)
CLOSED: [2024-02-22 Thu 17:41]

- Fehlende Daten (option)
- Umgang mit Fehlern
- Railway Oriented Programming
- (Asynchron & Parallel)

** DONE Grundlagen & DDD (Domain Driven Design) (3)
CLOSED: [2024-02-22 Thu 17:41]

- Immutability
- Algebraische Datentypen, Record Types (Wiederholung)
- Typen-getriebene Programmierung (Type Driven Design)
- (Klassen)
- [Programmieraufgabe!]

** DONE Property-Based Testing (4)
CLOSED: [2024-02-22 Thu 17:41]

- Testing
- Property-Based Testing
- Diamond-Kata?
- (Performance)

** DONE Parser Combinators (5)
CLOSED: [2024-02-22 Thu 17:41]

- Parser Combinators verstehen
- FParsec
- [Test!]


* Werkzeuge [11/11]

** DONE Benötigte Software
CLOSED: [2024-02-22 Thu 17:42]

- [[https://dotnet.microsoft.com/download][.Net Core SDK 8.0]]
- [[https://git-scm.com/][git]]
- [[https://code.visualstudio.com/][Visual Studio Code]]
  - [[http://ionide.io/][ionide.io]]
- [[https://try.fsharp.org/][try.fsharp.org]] oder [[https://fable.io/repl/][fable.io/repl/]]
- [[https://exercism.io/][exercism.io]]
- ([[https://github.com/][github.com]])

** DONE Übung 1
CLOSED: [2024-02-22 Thu 21:17]

- Installation überprüfen
  - dotnet core
  - git
  - code (VS Code)
  - exercism

** DONE Lösungen 1
CLOSED: [2024-02-22 Thu 21:18]

#+Latex: \scriptsize
#+begin_src shell :exports both
. /usr/local/opt/asdf/asdf.sh
dotnet --version
#+end_src

#+RESULTS:
: 8.0.101

#+begin_src shell :exports both
git --version
#+end_src

#+RESULTS:
: git version 2.39.3 (Apple Git-145)


#+Name: code-version
#+begin_src shell :exports both
code --version
#+end_src

#+ATTR_LaTeX: :center nil
#+RESULTS: code-version
| 1.85.2                                   |
| 8b3775030ed1a69b13e4f4c628c612102e30a681 |
| x64                                      |

#+begin_src shell :exports both
exercism version
#+end_src

#+RESULTS:
: exercism version 3.3.0

** DONE Übung 2
CLOSED: [2024-02-22 Thu 21:18]

- [[https://docs.microsoft.com/de-de/dotnet/fsharp/get-started/get-started-command-line][Erste Schritte in F# mit der .NET Core-CLI]]
- Erstelle ein F# Projekt
  - Untersuche das Ergebnis
  - Starte das Programm

** DONE Lösung 2
CLOSED: [2024-02-22 Thu 21:18]

  #+begin_src shell :eval never
    dotnet new sln -o FSNetCore
    cd FSNetCore

    dotnet new classlib -lang "F#" -o src/Library
    dotnet add src/Library/Library.fsproj package Newtonsoft.Json
    dotnet sln add src/Library/Library.fsproj

    dotnet new console -lang "F#" -o src/App
    dotnet add src/App/App.fsproj reference \
        src/Library/Library.fsproj
    dotnet sln add src/App/App.fsproj

    cd src/App
    dotnet run Hello World
  #+end_src

** DONE git
CLOSED: [2024-02-22 Thu 21:18]

- [[https://git-scm.com/][git]]
  #+begin_src shell :eval never
  git init
  git clone '<repo>'
  git status
  git add .
  git commit -m 'good message'
  git log
  #+end_src
- [[https://github.com/][github.com]]
  - [[https://help.github.com/en/github/getting-started-with-github/create-a-repo][getting-started-with-github/create-a-repo]]
- [[https://gitignore.io/][gitignore.io]]
- [[https://chris.beams.io/posts/git-commit/][How to Write a Git Commit Message]]

** DONE Übung 3
CLOSED: [2024-02-22 Thu 21:18]

- Initialisiere ein git-Repo (z.B. =course.2024.hwr.fun=)
  - (pull von github)
  - Committe eine Änderung
  - Betrachte die Historie
  - (push nach github)
- clone [[https://github.com/kirchnergo/course.2024.hwr.fun][github.com/kirchnergo/course.2024.hwr.fun]]

** DONE exercism
CLOSED: [2024-02-22 Thu 21:18]

- [[https://exercism.io/about][exercism.io/about]]
- Konfiguration
  #+begin_src shell :eval never
  exercism configure --token=99ada440-..-0be7ce2cfe40
  exercusm configure --workspace=/foo
  #+end_src
- Download und Sumbit
  #+begin_src shell :eval never
  exercism download --exercise=hello-world --track=fsharp
  exercism submit /path/to/file [/path/to/file2 ...]
  #+end_src

** DONE Übung 4
CLOSED: [2024-02-22 Thu 21:18]

- Konfiguriere exercism.io
- Lade die Hello-World-Aufgabe von exercism.io runter
  - Lass alle Tests laufen
  - Löse die Aufgabe
  - Submitte das Ergebnis
- commit & push

** DONE Lösung 4
CLOSED: [2024-02-22 Thu 21:18]

#+Latex: \scriptsize
#+begin_src shell :eval never
exercism download --exercise=hello-world --track=fsharp
#+end_src

#+begin_src fsharp :exports both
module HelloWorld =
  let hello: string = "Hello, World!"
#+end_src

#+RESULTS:
: module HelloWorld =
:   val hello: string = "Hello, World!"

#+begin_src shell :eval never
dotnet test
exercism submit HelloWorld.fs
#+end_src

** DONE Pause
CLOSED: [2024-02-22 Thu 21:18]

*** 
    :PROPERTIES:
    :BEAMER_env: block
    :END:

A language that doesn’t affect the way you think about programming, is not worth knowing.

\null\hfill-- Alan Perlis


* Datentypen [4/4]

** DONE Elementare Datentypen
CLOSED: [2024-02-22 Thu 21:18]

#+Latex: \scriptsize
#+begin_src fsharp :results value :exports both
let s = "hello"  // string
let i = 42       // int
let f = 3.141    // float
let b = true     // bool
let l = [1;2;3]  // list
printfn "%s, %i, %f, %g, %b, %A" s i f f b l
#+end_src

#+RESULTS:
: hello, 42, 3.141000, 3.141, true, [1; 2; 3]
: val s: string = "hello"
: val i: int = 42
: val f: float = 3.141
: val b: bool = true
: val l: int list = [1; 2; 3]
: val it: unit = ()

** DONE Tuple
CLOSED: [2024-02-22 Thu 21:18]

#+begin_src fsharp :results value :exports both
let t1 = (1, 2)
let t2 = ("one", "two", "three")
let t3 = (10, 10.0, "ten")
printfn "%A, %A %A" t1 t2 t3
#+end_src

#+RESULTS:
: (1, 2), ("one", "two", "three") (10, 10.0, "ten")
: val t1: int * int = (1, 2)
: val t2: string * string * string = ("one", "two", "three")
: val t3: int * float * string = (10, 10.0, "ten")
: val it: unit = ()

** DONE Discriminated Union
CLOSED: [2024-02-22 Thu 21:18]

#+begin_src fsharp :results output silent :exports code
type Suit = 
    | Hearts 
    | Clubs 
    | Diamonds 
    | Spades
type Rank = 
    | Value of int
    | Ace
    | King
    | Queen
    | Jack
    static member GetAllRanks() = 
        [ yield Ace
          for i in 2 .. 10 do yield Value i
          yield Jack; yield Queen; yield King ]
#+end_src

#+RESULTS:

** DONE Record Types
CLOSED: [2024-02-22 Thu 21:18]

- Gleichheit bei gleichen Werten 
  - bei Klassen: Gleichheit bei gleicher Referenz!
- Können rekursiv sein

#+begin_src fsharp :results value :exports both
type Card = { Suit: Suit; Rank: Rank }

/// This computes a list representing all the cards in the deck.
let fullDeck = 
    [ for suit in [Hearts; Diamonds; Clubs; Spades] do
              for rank in Rank.GetAllRanks() do 
                  yield {Suit=suit; Rank=rank} ];;
fullDeck |> Seq.length
#+end_src

#+RESULTS:
: fullDeck |> Seq.length;;
: val it: int = 52


* Collections [7/7]

** DONE Lists, Array, Seq
CLOSED: [2024-02-22 Thu 21:19]

#+Latex: \scriptsize

#+begin_src fsharp :results value :exports both
let list1 = [ 1; 2; 3 ]
let list2 = [ for i in 1 .. 8 -> i*i ]
let list3 = []
let list4 = 100 :: list2
let list5 = list1 @ list2
let list6 = [1 .. 10]
let array1 = [| 1; 2; 3 |]
let seq1 = seq {1 .. 3}
printfn "%A, %A, %A" list1 array1 seq1
#+end_src

#+RESULTS:
#+begin_example
[1; 2; 3], [|1; 2; 3|], seq [1; 2; 3]
val list1: int list = [1; 2; 3]
val list2: int list = [1; 4; 9; 16; 25; 36; 49; 64]
val list3: 'a list
val list4: int list = [100; 1; 4; 9; 16; 25; 36; 49; 64]
val list5: int list = [1; 2; 3; 1; 4; 9; 16; 25; 36; 49; 64]
val list6: int list = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10]
val array1: int array = [|1; 2; 3|]
val seq1: int seq
val it: unit = ()
#+end_example

** DONE Unendliche Sequenzen :)
CLOSED: [2024-02-22 Thu 21:19]

#+begin_src fsharp :results value :exports both
/// A random-number generator 
let rand = System.Random() ;;
/// An infinite sequence of numbers
let randomNumbers = seq { while true do yield rand.Next(100000) };;
/// The first 10 random numbers, sorted
let firstTenRandomNumbers = 
    randomNumbers
    |> Seq.take 10 
    |> Seq.sort
    |> Seq.toList;;
firstTenRandomNumbers
#+end_src

#+RESULTS:
: firstTenRandomNumbers;;
: val it: int list =
:   [2617; 3674; 8722; 10171; 15432; 30659; 39946; 50787; 72151; 73362]

** DONE Collection Functions
CLOSED: [2024-02-22 Thu 21:19]

 #+Name: fig:collection-functions
 #+Attr_Latex: :height 200
 [[../img/CollectionFunctions.png]]

** DONE Mapping (1)
CLOSED: [2024-02-22 Thu 21:19]

#+begin_src fsharp :results value :exports both
let primeCubes = List.map (fun n -> n * n * n) [2;3;5;7;11;13;17;19]
primeCubes
#+end_src

#+RESULTS:
: val primeCubes: int list = [8; 27; 125; 343; 1331; 2197; 4913; 6859]
: val it: int list = [8; 27; 125; 343; 1331; 2197; 4913; 6859]

#+begin_src fsharp :results value :exports both
/// Get the contents of the URL via a web request
let getAsync (url:string) = 
    async {
        let httpClient = new System.Net.Http.HttpClient()
        let! response = httpClient.GetAsync(url) |> Async.AwaitTask
        response.EnsureSuccessStatusCode () |> ignore
        return! response.Content.ReadAsStringAsync() |> Async.AwaitTask
    } |> Async.RunSynchronously
#+end_src

#+RESULTS:
: val getAsync: url: string -> string

** DONE Mapping (2)
CLOSED: [2024-02-22 Thu 21:19]

#+Latex: \tiny
#+begin_src fsharp :results value :exports both
let sites = ["http://www.bing.com"; "http://www.google.com"]
let fetch url = (url, getAsync url)
let ps = List.map fetch sites
let ls = List.map (fun (_,p) -> String.length p) ps
printfn "%A" ls
#+end_src

#+RESULTS:
#+begin_example
[91757; 47916]
val sites: string list = ["http://www.bing.com"; "http://www.google.com"]
val fetch: url: string -> string * string
val ps: (string * string) list =
  [("http://www.bing.com",
    "<!doctype html><html lang="de" dir="ltr"><head><meta name="th"+[91696 chars]);
   ("http://www.google.com",
    "<!doctype html><html itemscope="" itemtype="http://schema.org"+[47855 chars])]
val ls: int list = [91757; 47916]
val it: unit = ()
#+end_example


** DONE Folding
CLOSED: [2024-02-22 Thu 21:19]

#+begin_src fsharp :results value :exports both
let fold1 = List.fold (fun acc x -> acc + x) 0 [1..10]
let fold2 = [1..100] |> List.fold (+) 0
let fold3 = (0, [1..1000]) ||> List.fold (+)
printfn "%i, %i, %i" fold1 fold2 fold3
#+end_src

#+RESULTS:
: 55, 5050, 500500
: val fold1: int = 55
: val fold2: int = 5050
: val fold3: int = 500500
: val it: unit = ()

** DONE Pause
CLOSED: [2024-02-22 Thu 21:19]

*** 
    :PROPERTIES:
    :BEAMER_env: block
    :END:

Computers are useless. They can only give you answers.

\null\hfill-- Pablo Picasso


* Pattern Matching [8/8]

** DONE Basics 
CLOSED: [2024-02-22 Thu 21:19]

#+begin_src fsharp :results value :exports both
let matchInt i =
    match i with
    | 1 -> printfn "One"
    | 2 -> printfn "Two"
    | _ -> printfn "Other"  // "_" is a wildcard

matchInt 1
matchInt 2
matchInt 77
#+end_src

#+RESULTS:
: One
: Two
: Other
: val matchInt: i: int -> unit
: val it: unit = ()

** DONE When Guards
CLOSED: [2024-02-22 Thu 21:19]

#+begin_src fsharp :results value :exports both
let caseSwitch input =
    match input with
    | 1 -> printfn "One"
    | 2 -> printfn "A couple"
    | x when x < 12 -> printfn "Less than a dozen" 
    | x when x = 12 -> printfn "A dozen"
    | _ -> printfn "More than a dozen"

caseSwitch 2
caseSwitch 5
caseSwitch 12
caseSwitch 18
#+end_src

#+RESULTS:
: A couple
: Less than a dozen
: A dozen
: More than a dozen
: val caseSwitch: input: int -> unit
: val it: unit = ()

** DONE Matching Tuples (1)
CLOSED: [2024-02-22 Thu 21:19]

#+begin_src fsharp :results value :exports both
let extremes (s : seq<_>) = 
    s |> Seq.min,
    s |> Seq.max

let l, h = [1; 2; 9; 3; -1] |> extremes
(l,h)
#+end_src

#+RESULTS:
: val extremes: s: seq<'a> -> 'a * 'a when 'a: comparison
: val l: int = -1
: val h: int = 9
: val it: int * int = (-1, 9)

** DONE Matching Tuples (2)
CLOSED: [2024-02-22 Thu 21:19]

#+begin_src fsharp :results value :exports both
open System
let tryParseInt (s:string) =
    match System.Int32.TryParse(s) with 
    | true, i -> Some i
    | false, _ -> None

let a = "30" |> tryParseInt // Some 30
let b = "3X" |> tryParseInt // None
(a,b)
#+end_src

#+RESULTS:
: val tryParseInt: s: string -> int option
: val a: int option = Some 30
: val b: int option = None
: val it: int option * int option = (Some 30, None)

** DONE Matching Records
CLOSED: [2024-02-22 Thu 21:19]

#+begin_src fsharp :results value :exports both
type Track = { Title : string; Artist : string } ;;
let songs = [ { Title = "Summertime"; Artist = "Ray Barretto" };
      { Title = "La clave, maraca y guiro";
        Artist = "Chico Alvarez" };
      { Title = "Summertime";
        Artist = "DJ Jazzy Jeff & The Fresh Prince" } ] ;;
let dist = 
    songs 
    |> Seq.map (fun s -> match s with | {Title = title} -> title) 
    |> Seq.distinct |> Seq.toList
dist
#+end_src

#+RESULTS:
: val dist: string list = ["Summertime"; "La clave, maraca y guiro"]
: val it: string list = ["Summertime"; "La clave, maraca y guiro"]

** DONE Matching Lists
CLOSED: [2024-02-22 Thu 21:19]

#+begin_src fsharp :results value :exports both
let caseList l = 
    match l with
    | [] -> printfn "An empty pond" 
    | [fish] -> printfn "A pond with one fish only: %s" fish 
    | head::tail -> printfn "A pond with one fish: \
         %s (and %i more fish)" head (tail |> List.length)

caseList []
caseList ["One fish"]
caseList ["One fish"; "Two fish"; "Red fish" ]
caseList ["One fish"; "Two fish"; "Red fish"; "Blue fish" ]
#+end_src

#+RESULTS:
: An empty pond
: A pond with one fish only: One fish
: A pond with one fish: One fish (and 2 more fish)
: A pond with one fish: One fish (and 3 more fish)
: val caseList: l: string list -> unit
: val it: unit = ()

** DONE Active Patterns (|?|)
CLOSED: [2024-02-22 Thu 21:19]
   
#+Latex: \scriptsize
#+begin_src fsharp  :exports both
let (|Even|Odd|) input = if input % 2 = 0 then Even else Odd
#+end_src

#+RESULTS:
: val (|Even|Odd|) : input: int -> Choice<unit,unit>

#+begin_src fsharp :results value :exports both
let TestNumber input =
   match input with
   | Even -> printfn "%d is even" input
   | Odd -> printfn "%d is odd" input

TestNumber 7
TestNumber 8
TestNumber 9
#+end_src

#+RESULTS:
: 7 is odd
: 8 is even
: 9 is odd
: val TestNumber: input: int -> unit
: val it: unit = ()

** DONE Pause
CLOSED: [2024-02-22 Thu 21:19]

*** 
    :PROPERTIES:
    :BEAMER_env: block
    :END:

Any fool can write code that a computer can understand. 
Good programmers write code that humans can understand.

\null\hfill-- Martin Fowler


* Funktionen [4/4]

** DONE Basics
CLOSED: [2024-02-22 Thu 21:19]

#+begin_src fsharp :exports both :results value
let squareIt1 n = n * n
let squareIt2 = fun n -> n * n
let r1 = squareIt1 8
let r2 = squareIt2 9

let listOfFunctions = [squareIt1; squareIt2]
for fn in listOfFunctions do
    let result = fn 100
    printfn "If 100 is the input, the output is %i" result
#+end_src

#+RESULTS:
: If 100 is the input, the output is 10000
: If 100 is the input, the output is 10000
: val squareIt1: n: int -> int
: val squareIt2: n: int -> int
: val r1: int = 64
: val r2: int = 81
: val listOfFunctions: (int -> int) list =
:   [<fun:listOfFunctions@270-4>; <fun:listOfFunctions@270-5>]
: val it: unit = ()

** DONE Rekursion
CLOSED: [2024-02-22 Thu 21:19]

#+begin_src fsharp :results value :exports both
/// Computes the greatest common factor of two integers.
///
/// Since all of the recursive calls are tail calls,
/// the compiler will turn the function into a loop,
/// which improves performance and reduces memory consumption.
let rec gcf a b =
    match a with
    | 0 -> b
    | a when a < b -> gcf a (b - a)
    | _ -> gcf (a - b) b

printfn "The Greatest Common Factor of 300 \
         and 620 is %d" (gcf 300 620)
#+end_src

#+RESULTS:
: The Greatest Common Factor of 300 and 620 is 20
: val gcf: a: int -> b: int -> int
: val it: unit = ()

** DONE Partielle Anwendung 
CLOSED: [2024-02-22 Thu 21:19]

#+Latex: \scriptsize

#+begin_src fsharp :results value :exports both
let add1 = (+) 1        
let r1 = add1 2   // result => 3
let multiplyBy2 = (*) 2
let r2 = multiplyBy2 3   // result => 6
let equals3 = (=) 3
let r3 = equals3 3   // result => true

printfn "%i, %i, %b" r1 r2 r3
#+end_src

#+RESULTS:
: 3, 6, true
: val add1: (int -> int)
: val r1: int = 3
: val multiplyBy2: (int -> int)
: val r2: int = 6
: val equals3: (int -> bool)
: val r3: bool = true
: val it: unit = ()

** DONE Composition
CLOSED: [2024-02-22 Thu 21:19]

#+Latex: \scriptsize

#+begin_src fsharp :exports both :results value
let negate x = -1 * x
let square x = x*x
let print x = printfn "The number is: %d" x

let snp x = print (negate (square x))
let ``sqr, neg, and print`` x = x |> square |> negate |> print
let snp' = square >> negate >> print

snp 9, ``sqr, neg, and print`` 10, snp' 11
#+end_src

#+RESULTS:
#+begin_example
The number is: -81
The number is: -100
The number is: -121
val negate: x: int -> int
val square: x: int -> int
val print: x: int -> unit
val snp: x: int -> unit
val ``sqr, neg, and print`` : x: int -> unit
val snp': (int -> unit)
val it: unit * unit * unit = ((), (), ())
#+end_example


* Ende [3/3]

** DONE Zusammenfassung
CLOSED: [2024-02-22 Thu 21:19]

- Wichtige Werkzeuge (git, dotnet, code)
- Elementare Syntax
- Funktionen, Pattern Matching, Discriminated Unions (DU)
- Tuple, Record, List, Array, Seq
- Was ist Funktionale Programmierung?

** DONE Links
CLOSED: [2024-02-22 Thu 21:19]

- [[https://fsharp.org/][fsharp.org]]
- [[https://docs.microsoft.com/de-de/dotnet/fsharp/][docs.microsoft.com/../dotnet/fsharp]]
- [[https://en.wikipedia.org/wiki/F_Sharp_(programming_language)][wikipedia.org/../F Sharp (programming language)]]
- [[https://en.wikipedia.org/wiki/List_of_programming_languages_by_type#Functional_languages][wikipedia.org/../List of programming languages by type#Functional languages]]
- [[https://sergeytihon.com/][F# weekly]]
- [[https://fsharpforfunandprofit.com/][fsharpforfunandprofit.com]]
- [[https://www.tutorialspoint.com/fsharp/index.htm][tutorialspoint.com/fsharp]]
- [[http://www.rosettacode.org/][rosettacode.org]]

** DONE Hausaufgabe
CLOSED: [2024-02-22 Thu 21:19]

- [ ] [[https://git-scm.com/docs/gittutorial][git Tutorial]]
- [ ] [[https://docs.microsoft.com/de-de/dotnet/fsharp/tour][Tour durch F#]]
- exercism.io (E-Mail bis 11.03, mit /account/!)
  - [ ] Two-Fer
  - [ ] Leap
  - [ ] Isogram
  - [ ] Sum Of Multiples
  

* Sample                                                           :noexport:
 
** Frame 1

*** Thanks to Eric Fraga :B_block:BMCOL:
:PROPERTIES:
:BEAMER_COL: 0.48
:BEAMER_ENV: block
:END:

for the first viable Beamer setup in Org

*** Thanks to everyone else :B_block:BMCOL:
:PROPERTIES:
:BEAMER_COL: 0.48
:BEAMER_ACT: <2->
:BEAMER_ENV: block
:END:

for contributing to the discussion

